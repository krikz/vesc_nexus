#!/usr/bin/env python3

import os
import sys
from pathlib import Path

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç)
ROOT_DIR = sys.argv[1] if len(sys.argv) > 1 else "."

# –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
OUTPUT_FILE = "project_export.txt"

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å
INCLUDE_EXTENSIONS = {
    '.cpp', '.cxx', '.cc',
    '.h', '.hpp', '.hxx', '.hh',
    '.c', '.h',
    '.py',
    '.yaml', '.yml',
    '.xml', '.xacro',
    '.msg',
    '.launch', '.py', '.yaml',
    '.txt',
    '.md',
    '.dockerfile', 'dockerfile',
    '.cmake', 'cmakelists.txt',
    '.gitignore',
    '.json',
    '.sh', '.bash'
}

# –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
EXCLUDE_DIRS = {
    'build', 'install', 'log', '__pycache__',
    '.git', '.vscode', '.idea', 'venv', 'env',
    'devel', 'dist', 'node_modules',
    '__pycache__', '.pytest_cache', '.mypy_cache'
}

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
EXCLUDE_FILES = {
    'export_project.py',  # –ë—É–¥–µ—Ç –≤–∫–ª—é—á—ë–Ω, –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç—å ‚Äî –¥–æ–±–∞–≤—å —Å—é–¥–∞
}

# -----------------------------
# –°–∫—Ä–∏–ø—Ç
# -----------------------------

def should_include_file(path):
    if path.name.lower() in EXCLUDE_FILES:
        return False
    return path.suffix.lower() in INCLUDE_EXTENSIONS or path.name.lower() in ['cmakelists.txt', 'dockerfile']

def should_include_dir(dir_name):
    return dir_name not in EXCLUDE_DIRS

def read_file_safely(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        return content
    except Exception as e:
        return f"<–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}>"

def export_project(root_dir, output_file):
    root_path = Path(root_dir).resolve()
    if not root_path.exists():
        print(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {root_path}")
        return

    with open(output_file, 'w', encoding='utf-8') as out:
        # –ó–∞–ø–∏—à–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        out.write(f"# –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: {root_path.name}\n")
        out.write(f"# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: export_project.py\n")
        out.write(f"# –í—Ä–µ–º—è: {__import__('datetime').datetime.now().isoformat()}\n")
        out.write(f"# –ü—É—Ç—å: {root_path}\n")
        out.write(f"{'='*80}\n\n")

        file_count = 0
        for dirpath, dirnames, filenames in os.walk(root_path):
            dirnames[:] = [d for d in dirnames if should_include_dir(d)]  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏
            dirpath_obj = Path(dirpath)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if not should_include_dir(dirpath_obj.name):
                continue

            rel_dir = dirpath_obj.relative_to(root_path)

            for filename in sorted(filenames):
                file_path = Path(dirpath) / filename
                if not should_include_file(file_path):
                    continue

                rel_file_path = file_path.relative_to(root_path)
                content = read_file_safely(file_path)

                out.write(f"# {'-'*76}\n")
                out.write(f"# –§–∞–π–ª: {rel_file_path}\n")
                out.write(f"# –ü—É—Ç—å: {file_path}\n")
                out.write(f"# {'-'*76}\n")
                out.write(content)
                out.write(f"\n\n")

                file_count += 1

        out.write(f"# {'='*80}\n")
        out.write(f"# –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}\n")

    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {output_file}")
    print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {root_path}")
    print(f"üìÑ –§–∞–π–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ: {file_count}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python export_project.py <–ø—É—Ç—å_–∫_–ø—Ä–æ–µ–∫—Ç—É>")
        print("  –ü—Ä–∏–º–µ—Ä:")
        print("  python export_project.py .")
        print("  python export_project.py ~/ros2_ws/src")
        sys.exit(1)

    export_project(ROOT_DIR, OUTPUT_FILE)